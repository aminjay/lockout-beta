package com.LockOut.Server.Controllers;


import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.LockOut.Server.Models.Bundle;
import com.LockOut.Server.Models.User;
import com.LockOut.Server.Models.UsersSecure;
import com.LockOut.Server.Repositories.UserRepository;
import com.LockOut.Server.Repositories.UserSecureRepository;
import com.LockOut.Server.ReturnObjects.UserPoints;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/users") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired UserSecureRepository userSecureRepository;

	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		if (userRepository.findByUserName(name) != null) {
			return "Failed, username is already taken";
		} else {
			// create user
			User n = new User();
			n.setStatus(0);
			n.setUserName(name);
			n.setPassword(password);
			n.setProfilePictureSelection(0);//set to default profile picture
			n.setBundles(new ArrayList<Bundle>());//setup backpack
			n.initSocial();
			userRepository.save(n);
			return "Saved";
		}
	}
	
	@GetMapping(path = "/addWEmail") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String password,@RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		if (userRepository.findByUserName(name) != null) {
			return "Failed, username is already taken";
		} else {
			// create user
			User n = new User();
			n.setStatus(0);
			n.setUserName(name);
			n.setPassword(password);
			n.initSocial();
			n.setEmail(email);
			n.setBundles(new ArrayList<Bundle>());
			n.setProfilePictureSelection(0);//set to default profile picture
			userRepository.save(n);
			return "Saved";
		}
	}

	@GetMapping(path = "/delete") // Map ONLY GET Requests
	public @ResponseBody String deleteUser(@RequestParam String name, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User ToDelete = login(name, password);
		if (ToDelete != null) {
			userRepository.delete(ToDelete);
			return "Deleted";
		} else {
			return "invalid credentials, no user deleted";
		}
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<UsersSecure> getAllUsers() {
		// This returns a JSON or XML with the users
		Iterable<UsersSecure> users = userSecureRepository.findAll();
		if (users.iterator().hasNext() == true) {
			for(UsersSecure user : users) {
				user.setDays(null);
			}
			return users;
		} else {
			return null;
		}
	}

	@GetMapping(path = "/findByUserName") // Map ONLY GET Requests
	public @ResponseBody UsersSecure findByUserName(@RequestParam String userName) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		return userSecureRepository.findByUserName(userName);

	}

	@GetMapping(path = "/login") // Map ONLY GET Requests
	public @ResponseBody User login(@RequestParam String userName, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User Users = userRepository.findByUserName(userName);
		if (Users.getPassword().equals(password)) {
			return Users;
		}

		return null;
	}

	@GetMapping(path = "/updatePoints")
	public @ResponseBody int updatePoints(@RequestParam String userName, @RequestParam int points) {
		// find the user
		User profile = userRepository.findByUserName(userName);
		if (profile != null) {

			// update total points
			profile.setPointsTotal(profile.getPointsTotal() + points);
			profile.setPointsAvailable(profile.getPointsAvailable() + points);
			profile.setSeasonPoints(profile.getSeasonPoints() + points);
			// save the user
			userRepository.save(profile);
			return profile.getPointsTotal();
		} else {
			return -1;
		}
	}
	
	@GetMapping(path = "/getPoints")
	public @ResponseBody UserPoints getPoints(@RequestParam String userName) {
		// This returns a JSON or XML with the users
		User user = userRepository.findByUserName(userName);
		UserPoints pointsWanted = new UserPoints();
		if(user != null) {
			pointsWanted.SetupFromUser(user);
			return pointsWanted;
		}
		else {
			return null;
		}
	}
	
	@PutMapping(path = "/setPicture")
	public @ResponseBody String setProfilePicture(@RequestParam String userName, @RequestParam int profilePic) {
		// This returns a JSON or XML with the users
		User user = userRepository.findByUserName(userName);
		if(user != null) {
			user.setProfilePictureSelection(profilePic);
			userRepository.save(user);
			return "updated";
		}
		else {
			return "invalid user name";
		}
	}
}
